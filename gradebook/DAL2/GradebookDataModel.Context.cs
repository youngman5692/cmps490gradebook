//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace gradebook.DAL2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GradebookDataEntities : DbContext
    {
        public GradebookDataEntities()
            : base("name=GradebookDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Assignment> Assignments { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<GradeDistribution> GradeDistributions { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<testTable> testTables { get; set; }
        public virtual DbSet<Undertake> Undertakes { get; set; }
        public virtual DbSet<testView> testViews { get; set; }
        public virtual DbSet<teacherGrade> teacherGrades { get; set; }
    
        public virtual int AddClass(string number, string term, Nullable<int> year, string description, Nullable<int> teacher)
        {
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var teacherParameter = teacher.HasValue ?
                new ObjectParameter("teacher", teacher) :
                new ObjectParameter("teacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddClass", numberParameter, termParameter, yearParameter, descriptionParameter, teacherParameter);
        }
    
        public virtual int AddClass1(string number, string term, Nullable<int> year, string description, Nullable<int> teacher)
        {
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var teacherParameter = teacher.HasValue ?
                new ObjectParameter("teacher", teacher) :
                new ObjectParameter("teacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddClass1", numberParameter, termParameter, yearParameter, descriptionParameter, teacherParameter);
        }
    
        public virtual int AddGradeDistribution(string category, Nullable<decimal> weight, Nullable<int> courseID)
        {
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGradeDistribution", categoryParameter, weightParameter, courseIDParameter);
        }
    
        public virtual int AddAssignment(Nullable<int> pointsPossible, string description, Nullable<int> gradeID)
        {
            var pointsPossibleParameter = pointsPossible.HasValue ?
                new ObjectParameter("PointsPossible", pointsPossible) :
                new ObjectParameter("PointsPossible", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var gradeIDParameter = gradeID.HasValue ?
                new ObjectParameter("GradeID", gradeID) :
                new ObjectParameter("GradeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAssignment", pointsPossibleParameter, descriptionParameter, gradeIDParameter);
        }
    
        [DbFunction("GradebookDataEntities", "teacherGradesFunction")]
        public virtual IQueryable<teacherGradesFunction_Result> teacherGradesFunction(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<teacherGradesFunction_Result>("[GradebookDataEntities].[teacherGradesFunction](@CourseID)", courseIDParameter);
        }
    
        public virtual int teacherGradesProcedure(string courseID)
        {
            var courseIDParameter = courseID != null ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("teacherGradesProcedure", courseIDParameter);
        }
    
        [DbFunction("GradebookDataEntities", "teacherGradesView")]
        public virtual IQueryable<teacherGradesView_Result> teacherGradesView(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<teacherGradesView_Result>("[GradebookDataEntities].[teacherGradesView](@CourseID)", courseIDParameter);
        }
    
        [DbFunction("GradebookDataEntities", "GradeFunction")]
        public virtual IQueryable<GradeFunction_Result> GradeFunction(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GradeFunction_Result>("[GradebookDataEntities].[GradeFunction](@CourseID)", courseIDParameter);
        }
    
        public virtual ObjectResult<teacherGradesSP_Result> teacherGradesSP(string courseID)
        {
            var courseIDParameter = courseID != null ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<teacherGradesSP_Result>("teacherGradesSP", courseIDParameter);
        }
    
        public virtual int test(string courseID)
        {
            var courseIDParameter = courseID != null ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("test", courseIDParameter);
        }
    
        public virtual int Assign(Nullable<int> courseID, Nullable<int> assignmentID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var assignmentIDParameter = assignmentID.HasValue ?
                new ObjectParameter("AssignmentID", assignmentID) :
                new ObjectParameter("AssignmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Assign", courseIDParameter, assignmentIDParameter);
        }
    }
}
